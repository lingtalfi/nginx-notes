#------------------------------
# Nginx conf with default values 
# 2016-10-15
#------------------------------

# Defines user and group credentials used by worker processes.
# If group is omitted, a group whose name equals that of user is used. 
user _www _www; # nobody nobody


# Defines the number of worker processes.
# The optimal value depends on many factors including (but not limited to) the number of CPU cores, 
# the number of hard disk drives that store data, and load pattern. When one is in doubt, 
# setting it to the number of available CPU cores would be a good start (the value “auto” will try to autodetect it).
# The auto parameter is supported starting from versions 1.3.8 and 1.2.5. 
## @mac, to know the number of cores, use this command: sysctl -n hw.ncpu
## http://stackoverflow.com/questions/1715580/how-to-discover-number-of-logical-cores-on-mac-os-x
worker_processes  2; # 1


# Defines a file that will store the process ID of the main process. 
## Note: even the doc http://nginx.org/en/docs/ngx_core_module.html#pid says the default value is nginx.pid,
## the actual file is logs/nginx.pid (a bit confusing)
pid logs/nginx.pid; # nginx.pid


events {

    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    # It should be kept in mind that this number includes all connections (e.g. connections with proxied servers,
    # among others), not only connections with clients. 
    # Another consideration is that the actual number of simultaneous connections cannot exceed the current limit
    # on the maximum number of open files, which can be changed by worker_rlimit_nofile.     
    ## On linux or mac, you can set this to the max number of descriptors, which is given by: 
    ## ulimit -n 
    worker_connections  256; # 512

    # If multi_accept is disabled, a worker process will accept one new connection at a time. 
    # Otherwise, a worker process will accept all new connections at a time. 
    multi_accept on; # off
}


http {

    # Enables or disables emitting nginx version in error messages and in the “Server” response header field.
    server_tokens off; # on

    # Configures logging. Several logs can be specified on the same level
    # debug, info, notice, warn, error, crit, alert, or emerg.
    # For debug logging to work, nginx needs to be built with --with-debug
    ## multiple=true

    error_log  logs/error.log; # logs/error.log error

    # Sets the path, format, and configuration for a buffered log write.
    # If the format is not specified then the predefined “combined” format is used. 
    # Syntax: 
    # access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
    # access_log off;
    ## multiple=true
    access_log logs/access.log combined; # logs/access.log combined

    # Adds the specified charset to the “Content-Type” response header field.
    charset utf-8; # off 
    include       mime.types;

    # Defines the default MIME type of a response. 
    # Mapping of file name extensions to MIME types can be set with the types directive. 
    ## Note that if you debug using the return directive, it's better to leave it to text/plain (or not set it at all).
    ## If you set it to application/octet-stream, then the browser might try to open the download window, to download
    ## the content rather than to simply interpret it.
    default_type  application/octet-stream; # text/plain


    #------------------------------
    # OPEN FILE CACHE
    #------------------------------
    ## mostly useful if a server requires lots of writing/reading to disk
    #  Configures a cache that can store:
    #     open file descriptors, their sizes and modification times;
    #     information on existence of directories;
    #     file lookup errors, such as “file not found”, “no read permission”, and so on.
    #         Caching of errors should be enabled separately by the open_file_cache_errors directive. 
    # The directive has the following parameters:
    # max
    #     sets the maximum number of elements in the cache; on cache overflow the least recently used (LRU) elements are removed; 
    # inactive
    #     defines a time after which an element is removed from the cache if it has not been accessed during this time; by default, it is 60 seconds; 
    # off
    #     disables the cache.     
    ## Note that the ETag directive is based on last modified time and therefore depends on the open_file_cache settings.
    open_file_cache max=1000 inactive=60s; # off

    # Sets a time after which open_file_cache elements should be validated. 
    open_file_cache_valid  60s; # 60s

    # Sets the minimum number of file accesses during the period configured by the inactive
    # parameter of the open_file_cache directive, required for a file descriptor to remain open in the cache. 
    open_file_cache_min_uses  1; # 1

    # Enables or disables caching of file lookup errors by open_file_cache. 
    open_file_cache_errors off; # off




    #------------------------------
    # BUFFER SIZES
    #------------------------------
    # Sets buffer size for reading client request body. In case the request body is larger than the buffer,
    # the whole body or only its part is written to a temporary file. 
    # By default, buffer size is equal to two memory pages. 
    # This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms. 
    client_body_buffer_size 16k; # 8k|16k

    # Sets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. 
    # However, if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. 
    # If a request line or a request header field does not fit into this buffer then larger buffers, 
    # configured by the large_client_header_buffers directive, are allocated. 
    client_header_buffer_size 1k; # 1k

    # Sets the maximum allowed size of the client request body, specified in the “Content-Length” 
    # request header field. If the size in a request exceeds the configured value, the
    # 413 (Request Entity Too Large) error is returned to the client. 
    # Please be aware that browsers cannot correctly display this error. 
    # Setting size to 0 disables checking of client request body size. 
    client_max_body_size 8m; # 1m

    # Sets the maximum number and size of buffers used for reading large client request header. 
    # A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned
    # to the client. A request header field cannot exceed the size of one buffer as well, or the
    # 400 (Bad Request) error is returned to the client. Buffers are allocated only on demand.
    # By default, the buffer size is equal to 8K bytes. If after the end of request processing a connection is 
    # transitioned into the keep-alive state, these buffers are released. 
    large_client_header_buffers 2 1k; # 4 8k


    #------------------------------
    # TIMEOUTS
    #------------------------------
    # Defines a timeout for reading client request header. If a client does not transmit the
    # entire header within this time, the 408 (Request Time-out) error is returned to the client. 
    client_header_timeout 12s; # 60s

    # Defines a timeout for reading client request body. The timeout is set only for a period between two
    # successive read operations, not for the transmission of the whole request body. 
    # If a client does not transmit anything within this time, the 408 (Request Time-out) error is returned to the client. 
    client_body_timeout 12s; # 60s

    # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side.
    # The zero value disables keep-alive client connections. The optional second parameter sets a value
    # in the “Keep-Alive: timeout=time” response header field. Two parameters may differ.
    # The “Keep-Alive: timeout=time” header field is recognized by Mozilla and Konqueror.
    # MSIE closes keep-alive connections by itself in about 60 seconds. 
    keepalive_timeout 75s; # 75s

    # Sets a timeout for transmitting a response to the client. 
    # The timeout is set only between two successive write operations, not for the transmission of
    # the whole response. If the client does not receive anything within this time, the connection is closed. 
    send_timeout 60s; # 60s


    # Enables or disables gzipping of responses. 
    gzip on; # off
    # Sets the minimum length of a response that will be gzipped. The length is determined only from the “Content-Length” response header field. 
    gzip_min_length 100; # 20

    # Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9. 
    gzip_comp_level 3; # 1


    # Enables gzipping of responses for the specified MIME types in addition to “text/html”. 
    # The special value “*” matches any MIME type (0.8.29). Responses with the “text/html” type are always compressed. 
    gzip_types text/html; # text/html 

    #  Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions.
    # The special mask “msie6” (0.7.12) corresponds to the regular expression “MSIE [4-6]\.”, but works faster. 
    # Starting from version 0.8.11, “MSIE 6.0; ... SV1” is excluded from this mask. 
    gzip_disable "msie";




    #------------------------------
    # FASTCGI CACHE
    #------------------------------
    ## caching the result of dynamic page served by the fastcgi server (php-fpm)
    ## - the path: location of the cache
    ## - levels: subdirectory levels
    ## - keys_zone: the name of the zone AND its size
    ## - inactive: if a cache isn't accessed for a particular amount of time specified by the "inactive" option (60 minutes here), then Nginx removes it
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=MYAPP:100m inactive=60m;
    # Defines a key for caching
    ## Nginx encrypts an accessed file with MD5 based on this directive.
    fastcgi_cache_key "$scheme$request_method$host$request_uri";


    server {

        # Sets the root directory for requests.
        root /sites/wordpress; # html

        # Defines files that will be used as an index when requests end with the slash character (/).
        # The file name can contain variables. 
        # Files are checked in the specified order. 
        index index.php index.html; # index.html


        #------------------------------
        # FASTCGI CACHE
        #------------------------------
        # Defines a shared memory zone used for caching. The same zone can be used in several places. 
        # Parameter value can contain variables (1.7.9). The off parameter disables caching inherited from the previous configuration level. 
        fastcgi_cache MYAPP; # off
        # Sets caching time for different response codes
        # For example, the following directives
        #     fastcgi_cache_valid 200 302 10m;
        #     fastcgi_cache_valid 404      1m;
        # set 10 minutes of caching for responses with codes 200 and 302 and 1 minute for responses with code 404.
        # If only caching time is specified
        #     fastcgi_cache_valid 5m;
        # then only 200, 301, and 302 responses are cached.
        # In addition, the any parameter can be specified to cache any responses:
        #     fastcgi_cache_valid 200 302 10m;
        #     fastcgi_cache_valid 301      1h;
        #     fastcgi_cache_valid any      1m;
        ## multiple=true
        fastcgi_cache_valid 200 60m;



        location ~ \.php {
            include fastcgi_params;
            include fastcgi.conf;
            
            # Sets the address of a FastCGI server.
            # The address can be specified as a domain name or IP address, and a port: 
            fastcgi_pass 127.0.0.1:9000;
        }
    }



}
